-- Drop existing tables and sequences to start fresh (CAUTION: This will delete all data)
-- Consider commenting out these DROP statements if you have important data.
DROP TABLE UserDates;
DROP TABLE RecoveryTransactionTable;
DROP TABLE BookingTransactionTable;
DROP TABLE CancelledLoan;
DROP TABLE LoanFinancialDetails;
DROP TABLE MarkupTable;
DROP TABLE REPAYMENTDETAILS;
DROP TABLE LoanApplication;
DROP TABLE UnauthorizedLoanLimits;
DROP TABLE LoanLimits;
DROP TABLE GLAccountsTable;
DROP TABLE AccountTable;
DROP TABLE CurrencyTable;
DROP TABLE CustomerInfo;
DROP TABLE activities;
DROP TABLE users;
DROP TABLE branches;
DROP TABLE BaseRateTable;

-- Drop existing sequences
DROP SEQUENCE DB2ADMIN.VoucherIdSequence;

-- Create Branch table
CREATE TABLE branches (
    branchCode INT PRIMARY KEY NOT NULL,
    branchName VARCHAR(50),
    location VARCHAR(50),
    city VARCHAR(50)
);

-- Create User table
CREATE TABLE users (
    userId VARCHAR(50) PRIMARY KEY NOT NULL,
    password VARCHAR(50),
    status VARCHAR(1),
    branchCode INT,
    userIPAddress VARCHAR(50),
    lastSignOnDate TIMESTAMP,
    userRole VARCHAR(50),
    module VARCHAR(50),
    FOREIGN KEY (branchCode) REFERENCES branches(branchCode)
);

-- Create Activity table
CREATE TABLE activities (
    activityId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    userId VARCHAR(50),
    activity VARCHAR(50),
    FOREIGN KEY (userId) REFERENCES users(userId)
);

-- Create UserDates table
CREATE TABLE UserDates  (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    userId VARCHAR(50),
    branchCode INT,
    branchName VARCHAR(100),
    currentDate TIMESTAMP NOT NULL,
    previousDate TIMESTAMP NULL,
    FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE
);

-- Create CustomerInfo table
CREATE TABLE CustomerInfo (
    CustomerID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    BranchCode INT NOT NULL,
    Category CHAR(1) CHECK (Category IN ('G', 'C') NOT NULL),
    FOREIGN KEY (BranchCode) REFERENCES branches(branchCode)
);

-- Create CurrencyTable
CREATE TABLE CurrencyTable (
    CurrencyCode int PRIMARY KEY NOT null,
    CurrencyName VARCHAR(50) NOT NULL,
    CurrencyRate Decimal(15,2) NOT NULL
);

-- Create AccountTable
CREATE TABLE AccountTable (
    AccountId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    BranchCode INT NOT NULL,
    AccountTitle VARCHAR(100) NOT NULL,
    CurrencyCode int NOT NULL,
    Balance DECIMAL(15,2) DEFAULT 0.00 NOT NULL,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE CASCADE,
    FOREIGN KEY (BranchCode) REFERENCES branches(BranchCode) ON DELETE CASCADE,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE CASCADE
);

-- Create GLAccountsTable
CREATE TABLE GLAccountsTable (
    AccountId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    BranchCode INT NOT NULL,
    AccountTitle VARCHAR(100) NOT NULL,
    CurrencyCode int NOT NULL,
    Balance DECIMAL(15,2) DEFAULT 0.00 NOT NULL,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE CASCADE,
    FOREIGN KEY (BranchCode) REFERENCES branches(BranchCode) ON DELETE CASCADE,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE CASCADE
);

-- Create LoanLimits table
CREATE TABLE LoanLimits (
    LimitID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    LoanLimit DECIMAL(15, 2),
    LimitBalance DECIMAL(15, 2),
    CreatedBy VARCHAR(50),
    CreatedOn TIMESTAMP,
    UpdatedBy VARCHAR(50),
    UpdatedOn TIMESTAMP,
    Status INT DEFAULT 9 NOT NULL,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber),
    FOREIGN KEY (CreatedBy) REFERENCES users(userId) ON DELETE SET NULL,
    FOREIGN KEY (UpdatedBy) REFERENCES users(userId) ON DELETE SET NULL
);

-- Create UnauthorizedLoanLimits table
CREATE TABLE UnauthorizedLoanLimits (
    LimitID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    LoanLimit DECIMAL(15, 2),
    LimitBalance DECIMAL(15, 2),
    CreatedBy VARCHAR(50),
    CreatedOn TIMESTAMP,
    UpdatedBy VARCHAR(50),
    UpdatedOn TIMESTAMP,
    Status INT DEFAULT 1 NOT NULL,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber),
    FOREIGN KEY (CreatedBy) REFERENCES users(userId) ON DELETE SET NULL,
    FOREIGN KEY (UpdatedBy) REFERENCES users(userId) ON DELETE SET NULL
);

-- Create BaseRateTable
CREATE TABLE BaseRateTable (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    baseName VARCHAR(255) NOT NULL UNIQUE,
    baseRate DECIMAL(10, 4)
);

-- Create LoanApplication table
CREATE TABLE LoanApplication (
    LoanID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) UNIQUE NOT null,
    CustomerNumber VARCHAR(20),
    GrantDate DATE,
    DocumentRefNo VARCHAR(12),
    DealAmount DECIMAL(15, 2),
    Remarks VARCHAR(250),
    Accrual DECIMAL(15, 2),
    Status INT DEFAULT 1 NOT NULL,
    Authorized_By VARCHAR(50),
    NoOfDays INTEGER,
    ApplicableRate DOUBLE,
    ODRate DOUBLE,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber)
);

-- Create REPAYMENTDETAILS Table
CREATE TABLE REPAYMENTDETAILS(
    LoanNumber VARCHAR(9) PRIMARY KEY NOT null,
    NoOfDays INT,
    MaturityDate DATE,
    CONSTRAINT fk_loanNumber FOREIGN KEY (LoanNumber) REFERENCES LOANAPPLICATION(LoanNumber) ON DELETE CASCADE
);

-- Create MarkupTable
CREATE TABLE MarkupTable (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    loanNumber VARCHAR(9) NOT NULL,
    baseRateId BIGINT NOT NULL,
    spreadRate DECIMAL(4, 2) NOT NULL,
    applicableRate DECIMAL(5, 2) NOT NULL,
    odRate DECIMAL(4, 2) NOT NULL,
    CONSTRAINT PK_MarkupTable PRIMARY KEY (id),
    CONSTRAINT FK_MarkupBaseRate FOREIGN KEY (baseRateId) REFERENCES BaseRateTable(id) ON DELETE RESTRICT,
    CONSTRAINT FK_MarkupLoanApplication FOREIGN KEY (loanNumber) REFERENCES LOANAPPLICATION(LoanNumber) ON DELETE CASCADE,
    CONSTRAINT CK_ODRateGreaterThanApplicable CHECK (odRate >= applicableRate)
);

-- Create LoanFinancialDetails Table
CREATE TABLE LoanFinancialDetails (
    FinancialDetailID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) NOT NULL,
    ProfitAmount DECIMAL(15, 2),
    ReceivableAmountAtMaturity DECIMAL(15, 2),
    FOREIGN KEY (LoanNumber) REFERENCES LoanApplication(LoanNumber) ON DELETE CASCADE
);

-- Create CancelledLoan table
CREATE TABLE CancelledLoan (
    LoanID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) NOT null,
    CustomerNumber VARCHAR(20),
    GrantDate DATE,
    DocumentRefNo VARCHAR(12),
    DealAmount DECIMAL(15, 2),
    Remarks VARCHAR(250),
    Accrual DECIMAL(15, 2),
    Status INT,
    Authorized_By VARCHAR(50),
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber)
);

-- Create LoanRecovery table
CREATE TABLE LoanRecovery (
    RecoveryID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) NOT NULL,
    CustomerNumber VARCHAR(20) NOT NULL,
    AccountTitle VARCHAR(100),
    CurrencyCode INT,
    CurrencyName VARCHAR(50),
    DealAmount DECIMAL(15, 2),
    ProfitAmount DECIMAL(15, 2),
    CalculatedAccrual DECIMAL(15, 2),
    RecoveryAmount DECIMAL(15, 2),
    RecoveryDate DATE NOT NULL,
    OriginalGrantDate DATE,
    DaysSinceGrant INT,
    RecoveredBy VARCHAR(50),
    RecoveryTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    Status INT DEFAULT 1 NOT NULL,
    AuthorizedBy VARCHAR(50),
    FOREIGN KEY (LoanNumber) REFERENCES LoanApplication(LoanNumber) ON DELETE NO ACTION,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE NO ACTION,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE NO ACTION,
    FOREIGN KEY (RecoveredBy) REFERENCES users(userId) ON DELETE SET NULL,
    FOREIGN KEY (AuthorizedBy) REFERENCES users(userId) ON DELETE SET NULL
);

-- Create BookingTransactionTable
CREATE TABLE BookingTransactionTable (
    TransactionCode VARCHAR(5) NOT NULL,
    VoucherNumber VARCHAR(50) NOT NULL,
    TransactionNumber INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    AccountNumber VARCHAR(50) NOT NULL,
    AccountTitle VARCHAR(100),
    Currency VARCHAR(3),
    DebitAmount DECIMAL(19, 2),
    CreditAmount DECIMAL(19, 2),
    TransactionDate TIMESTAMP,
    PRIMARY KEY (TransactionCode, VoucherNumber, TransactionNumber)
);

-- Create VoucherIdSequence
CREATE SEQUENCE DB2ADMIN.VoucherIdSequence
    AS INTEGER
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO CYCLE
    CACHE 10;

-- Create RecoveryTransactionTable
CREATE TABLE RecoveryTransactionTable (
    TransactionCode VARCHAR(5) NOT NULL,
    VoucherNumber VARCHAR(50) NOT NULL,
    TransactionNumber INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 0001, INCREMENT BY 1),
    AccountNumber VARCHAR(50) NOT NULL,
    AccountTitle VARCHAR(100),
    Currency VARCHAR(3),
    DebitAmount DECIMAL(19, 2),
    CreditAmount DECIMAL(19, 2),
    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    VoucherId INTEGER,
    PRIMARY KEY (TransactionCode, VoucherNumber, TransactionNumber)
);

-- Insert initial data into branches
INSERT INTO branches (branchCode, branchName, location, city)
VALUES
  (1001, 'Karachi Main', 'I. I. Chundrigar', 'Karachi'),
  (1002, 'Center Ponit', 'Qayuumabad', 'Karachi'),
  (3001, 'Jinnah Super', 'Blue Area', 'Islamabad'),
  (4001, 'Liberty Branch', 'Noor Jahan Rd', 'Lahore'),
  (5001, 'Bosan Street', 'Multan Road', 'Multan');

-- Insert initial data into users
INSERT INTO users (userId, password, status, branchCode, userIPAddress, lastSignOnDate, userRole, MODULE) VALUES
('TellerUsr', 'pass123', 'I', 1001, '10.51.41.23', CURRENT_TIMESTAMP, 'User', NULL),
('Creditusr', 'secure456', 'A', 1002, '10.51.41.24', CURRENT_TIMESTAMP, 'User', 'Credit Management'),
('TradeUsr', 'trade789', 'I', 3001, '10.51.41.25', CURRENT_TIMESTAMP, 'Trader', NULL),
('CRMUsr', 'crm1011', 'I', 4001, 'Get from System', CURRENT_TIMESTAMP, 'CRM', NULL),
('TDRUsr', 'tdr1213', 'I', 5001, '10.51.41.26', CURRENT_TIMESTAMP, 'TDR', NULL),
('TellerAuth', 'tellerAuth1415', 'I', 1001, '10.51.41.27', CURRENT_TIMESTAMP, 'TellerAuth', NULL),
('CreditAuth', 'creditAuth1617', 'A', 1002, '10.51.41.28', CURRENT_TIMESTAMP, 'CreditAuth', 'Credit Management'),
('TradeAuth', 'tradeAuth1819', 'I', 3001, '10.51.41.29', CURRENT_TIMESTAMP, 'TradeAuth', NULL),
('CRMAuth', 'crmAuth2021', 'I', 4001, '10.51.41.30', CURRENT_TIMESTAMP, 'CRMAuth', NULL),
('TDRAuth', 'tdrAuth2223', 'I', 5001, '10.51.41.31', CURRENT_TIMESTAMP, 'TDRAuth', NULL);

-- Insert initial data into activities
INSERT INTO activities (userId, activity) VALUES
('Creditusr', 'ASGLIM'),
('Creditusr', 'BOOK'),
('Creditusr', 'MODIFY'),
('Creditusr', 'CANCEL'),
('Creditusr', 'INQUIRE'),
('Creditusr', 'RECOVERY'),
('Creditusr', 'REPORT'),
('CreditAuth', 'BOOKAUTH'),
('CreditAuth', 'MODIFYAUTH'),
('CreditAuth', 'CANCELAUTH'),
('CreditAuth', 'INQUIREAUTH'),
('CreditAuth', 'RECOVERYAUTH'),
('CreditAuth', 'REPORT');

-- Insert initial data into CurrencyTable
INSERT INTO CurrencyTable (CurrencyCode, CurrencyName, CurrencyRate) VALUES
(586, 'PKR', 1),
(840, 'USD', 280.25);

-- Insert initial data into CustomerInfo
INSERT INTO CustomerInfo (CustomerNumber, BranchCode, Category) VALUES
('0081123456011', 1001, 'C'),
('0081123457011', 1001, 'C'),
('I23001010011', 1002, 'G'),
('A01001011000', 1001, 'G');

-- Insert initial data into GLAccountsTable
INSERT INTO GLAccountsTable (CustomerNumber, BranchCode, AccountTitle, CurrencyCode, Balance) VALUES
('I23001010011', 1002, 'Income', 586, 0.00),
('A01001011000', 1001, 'Financing', 586, 0.00);

-- Insert initial data into AccountTable
INSERT INTO AccountTable (CustomerNumber, BranchCode, AccountTitle, CurrencyCode, Balance) VALUES
('0081123456011', 1001, 'ABC Company', 586, 15000.00),
('0081123457011', 1001, 'XYZ Company', 586, 10000.00),
('I23001010011', 1002, 'Income', 840, 0.00),
('A01001011000', 1001, 'Financing', 840, 0.00);

-- Insert initial data into BaseRateTable
INSERT INTO BaseRateTable (baseName, baseRate)
VALUES
('1-Month KIBOR', 12.18),
('3-Month KIBOR', 12.45),
('6-Month KIBOR', 11.99),
('FIXED Rate', null);

-- Insert a sample LoanApplication (adjust dates as needed)
INSERT INTO LoanApplication (LoanNumber, CustomerNumber, GrantDate, DocumentRefNo, DealAmount, Remarks, Accrual, Status, Authorized_By, NoOfDays, ApplicableRate, ODRate)
VALUES ('7412', '0081123456011', '2025-04-14', 'ABCD74122025', 2000.00, 'Sample Loan', 23.63, 7, NULL, 30, 14.38, 16.0);

-- Insert a sample REPAYMENTDETAILS (adjust dates as needed)
INSERT INTO REPAYMENTDETAILS (LoanNumber, NoOfDays, MaturityDate)
VALUES ('7412', 60, '2025-06-13');

-- You can add more INSERT statements for other tables as needed.
