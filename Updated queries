

CREATE TABLE testing 
(
	id int PRIMARY KEY NOT NULL,
	name varchar(255)
)

DELETE FROM BAHL.USERS
WHERE USERID='user123';
DELETE FROM BAHL.USERS
WHERE USERID='user456';

DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=1;
DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=2;
DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=3;
DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=4;





-- Create Branch table
CREATE TABLE branches (
    branchCode INT PRIMARY KEY NOT NULL,
    branchName VARCHAR(50),
    location VARCHAR(50),
    city VARCHAR(50)
);

-- Create User table
CREATE TABLE users (
    userId VARCHAR(50) PRIMARY KEY NOT NULL,
    password VARCHAR(50),
    status VARCHAR(1),
    branchCode INT,
    userIPAddress VARCHAR(50),
    lastSignOnDate TIMESTAMP,
    userRole VARCHAR(50),
    module VARCHAR(50),
    FOREIGN KEY (branchCode) REFERENCES branches(branchCode)
);

-- Create Activity table
CREATE TABLE activities (
    activityId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    userId VARCHAR(50),
    activity VARCHAR(50),
    FOREIGN KEY (userId) REFERENCES users(userId)
);










INSERT INTO branches (branchCode, branchName, location, city)
VALUES
  (1001, 'Karachi Main', 'I. I. Chundrigar', 'Karachi'),
  (1002, 'Center Ponit', 'Qayuumabad', 'Karachi'),
  (3001, 'Jinnah Super', 'Blue Area', 'Islamabad'),
  (4001, 'Liberty Branch', 'Noor Jahan Rd', 'Lahore'),
  (5001, 'Bosan Street', 'Multan Road', 'Multan');

INSERT INTO users (userId, password, status, branchCode, userIPAddress, lastSignOnDate, userRole, MODULE) VALUES
('TellerUsr', 'pass123', 'I', 1001, '10.51.41.23', CURRENT_TIMESTAMP, 'User', NULL),
('Creditusr', 'secure456', 'A', 1002, '10.51.41.24', CURRENT_TIMESTAMP, 'User', 'Credit Management'),
('TradeUsr', 'trade789', 'I', 3001, '10.51.41.25', CURRENT_TIMESTAMP, 'Trader', NULL),
('CRMUsr', 'crm1011', 'I', 4001, 'Get from System', CURRENT_TIMESTAMP, 'CRM', NULL),
('TDRUsr', 'tdr1213', 'I', 5001, '10.51.41.26', CURRENT_TIMESTAMP, 'TDR', NULL),
('TellerAuth', 'tellerAuth1415', 'I', 1001, '10.51.41.27', CURRENT_TIMESTAMP, 'TellerAuth', NULL),
('CreditAuth', 'creditAuth1617', 'A', 1002, '10.51.41.28', CURRENT_TIMESTAMP, 'CreditAuth', 'Credit Management'),
('TradeAuth', 'tradeAuth1819', 'I', 3001, '10.51.41.29', CURRENT_TIMESTAMP, 'TradeAuth', NULL),
('CRMAuth', 'crmAuth2021', 'I', 4001, '10.51.41.30', CURRENT_TIMESTAMP, 'CRMAuth', NULL),
('TDRAuth', 'tdrAuth2223', 'I', 5001, '10.51.41.31', CURRENT_TIMESTAMP, 'TDRAuth', NULL);



INSERT INTO activities (userId, activity) VALUES
('Creditusr', 'ASGLIM'),
('Creditusr', 'BOOK'),
('Creditusr', 'MODIFY'),
('Creditusr', 'CANCEL'),
('Creditusr', 'INQUIRE'),
('Creditusr', 'RECOVERY'),
('Creditusr', 'REPORT'),
('CreditAuth', 'BOOKAUTH'),
('CreditAuth', 'MODIFYAUTH'),
('CreditAuth', 'CANCELAUTH'),
('CreditAuth', 'INQUIREAUTH'),
('CreditAuth', 'RECOVERYAUTH'),
('CreditAuth', 'REPORT');

DROP TABLE UserDates;
DROP TABLE ACTIVITIES;
DROP TABLE BRANCHES;
DROP TABLE USERS;


CREATE TABLE UserDates  (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    userId VARCHAR(50),
    branchCode INT,
    branchName VARCHAR(100),
    currentDate TIMESTAMP NOT NULL,
    previousDate TIMESTAMP NULL, -- âœ… NULL allowed now
    FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE
);


ALTER TABLE UserDates
ADD COLUMN previousDate TIMESTAMP;


CREATE TABLE CustomerInfo (
    CustomerID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,  -- Auto-increment ID
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,  -- User-facing unique ID
    BranchCode INT NOT NULL,
    Category CHAR(1) CHECK (Category IN ('G', 'C'))
);


INSERT INTO CUSTOMERINFO
(CUSTOMERNUMBER, BRANCHCODE, CATEGORY)
VALUES('0081123456034', 1002, 'C');


DROP TABLE CustomerInfo;

CREATE TABLE CurrencyTable (
    CurrencyCode int PRIMARY KEY NOT null,
    CurrencyName VARCHAR(50) NOT NULL,
    CurrencyRate Decimal(15,2) NOT NULL
);

CREATE TABLE AccountTable (
    AccountId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    BranchCode INT NOT NULL,
    AccountTitle VARCHAR(100) NOT NULL,
    CurrencyCode int NOT NULL,
    Balance DECIMAL(15,2) DEFAULT 0.00,  -- Loan balance (amount given or due)
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE CASCADE,
    FOREIGN KEY (BranchCode) REFERENCES branches(BranchCode) ON DELETE CASCADE,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE CASCADE
);

CREATE TABLE GLAccountsTable (
    AccountId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    BranchCode INT NOT NULL,
    AccountTitle VARCHAR(100) NOT NULL,
    CurrencyCode int NOT NULL,
    Balance DECIMAL(15,2) DEFAULT 0.00,  -- Loan balance (amount given or due)
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE CASCADE,
    FOREIGN KEY (BranchCode) REFERENCES branches(BranchCode) ON DELETE CASCADE,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE CASCADE
);

DROP TABLE ACCOUNTTABLE ;

DROP TABLE LOANLIMITS  ;

DROP TABLE CUSTOMERGLMAPPING;

-- Currency Data
INSERT INTO CurrencyTable (CurrencyCode, CurrencyName, CurrencyRate) VALUES 
(586, 'PKR', 1),
(840, 'USB', 280.25);

UPDATE DB2ADMIN.CURRENCYTABLE
SET CURRENCYNAME='USD', CURRENCYRATE=280.25
WHERE CURRENCYCODE=840;

DELETE FROM DB2ADMIN.CURRENCYTABLE
WHERE CURRENCYCODE='PKR';


-- Customers Data (Using branchCode from your previous data)
INSERT INTO CustomerInfo (CustomerNumber, BranchCode, Category) VALUES 
('0081123456011', 1001, 'C'),
('0081123457011', 1001, 'C'),
('I23001010011', 1002, 'G'),
('A01001011000', 1001, 'G');

-- Accounts Data
INSERT INTO GLAccountsTable (CustomerNumber, BranchCode, AccountTitle, CurrencyCode, Balance) VALUES 
('I23001010011', 1002, 'Income', 586, 0.00),
('A01001011000', 1001, 'Financing', 586, 0.00);

UPDATE DB2ADMIN.ACCOUNTTABLE
SET CUSTOMERNUMBER='0081123457011', BRANCHCODE=1001, ACCOUNTTITLE='XYZ Company', CURRENCYCODE=586, BALANCE=0.00
WHERE ACCOUNTID=2;


UPDATE DB2ADMIN.ACCOUNTTABLE
SET CUSTOMERNUMBER='0081123457011', BRANCHCODE=1001, ACCOUNTTITLE='XYZ Company', CURRENCYCODE=840, BALANCE=0.00
WHERE ACCOUNTID=2;

SELECT * FROM LoanLimits WHERE customerNumber = '0081123456011';

INSERT INTO CustomerInfo (CustomerNumber, BranchCode, Category)
VALUES ('0081123455033', 1002, 'C'); -- Or whatever the correct BranchCode and Category are for this customer

INSERT INTO AccountTable (CustomerNumber, BranchCode, AccountTitle, CurrencyCode, Balance) VALUES 
('0081123455033', 1002, 'EstateWala Inc', 586, 150000);


DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=5;
DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=6;
DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=7;
DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=8;

CREATE TABLE LoanLimits (
    LimitID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    LoanLimit DECIMAL(15, 2),
    LimitBalance DECIMAL(15, 2),
    CreatedBy VARCHAR(50),
    CreatedOn TIMESTAMP,
    UpdatedBy VARCHAR(50),
    UpdatedOn TIMESTAMP,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber),
    FOREIGN KEY (CreatedBy) REFERENCES users(userId) ON DELETE SET NULL,
    FOREIGN KEY (UpdatedBy) REFERENCES users(userId) ON DELETE SET NULL
);

DROP TABLE LOANLIMITS;


--IN office changes



INSERT INTO BaseRateTable (baseName, baseRate)
VALUES 
('1-Month KIBOR', 12.18),
('3-Month KIBOR', 12.45),
('6-Month KIBOR', 11.99),
('FIXED Rate', NULL);

CREATE TABLE BaseRateTable (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    baseName VARCHAR(255) NOT NULL UNIQUE,
    baseRate DECIMAL(10, 4) NOT NULL
);
 
--update

CREATE TABLE LoanApplication ( 
     LoanID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), 
     LoanNumber VARCHAR(9) UNIQUE NOT null, 
     CustomerNumber VARCHAR(20), 
     GrantDate DATE, 
     DocumentRefNo VARCHAR(12), 
     DealAmount DECIMAL(15, 2), 
     Remarks VARCHAR(250), 
     Accrual DECIMAL(15, 2), 
     Status INT DEFAULT 1, -- 1: Unauthorized, 0: Authorized, 9: Cancelled 
     Authorized_By VARCHAR(50), 
     FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) 

 );
 
 -- RepaymentDetails Table 

 CREATE TABLE REPAYMENTDETAILS( 
     LoanNumber VARCHAR(9) PRIMARY KEY NOT null, -- LoanNumber as primary key and foreign key 
     NoOfDays INT, 
     MaturityDate DATE, 
     CONSTRAINT fk_loanNumber FOREIGN KEY (LoanNumber) REFERENCES LOANAPPLICATION(LoanNumber) ON DELETE CASCADE 
 );

 




 -- MarkupTable 

 CREATE TABLE MarkupTable ( 
     id BIGINT GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), 
     loanNumber VARCHAR(9) NOT NULL, 
     baseRateId BIGINT NOT NULL, 
     spreadRate DECIMAL(4, 2) NOT NULL, 
     applicableRate DECIMAL(5, 2) NOT NULL, 
     odRate DECIMAL(4, 2) NOT NULL, 
     CONSTRAINT PK_MarkupTable PRIMARY KEY (id), 
     CONSTRAINT FK_MarkupBaseRate FOREIGN KEY (baseRateId) REFERENCES BaseRateTable(id) ON DELETE RESTRICT, 
     CONSTRAINT FK_MarkupLoanApplication FOREIGN KEY (loanNumber) REFERENCES LOANAPPLICATION(LoanNumber) ON DELETE CASCADE, 
     CONSTRAINT CK_ODRateGreaterThanApplicable CHECK (odRate >= applicableRate) 

 );
 
 -- ProfitReceivable Table 

 CREATE TABLE LoanFinancialDetails ( 
     FinancialDetailID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), 
     LoanNumber VARCHAR(9) NOT NULL, 
     ProfitAmount DECIMAL(15, 2), 
     ReceivableAmountAtMaturity DECIMAL(15, 2), 
     FOREIGN KEY (LoanNumber) REFERENCES LoanApplication(LoanNumber) ON DELETE CASCADE 
 );

 
 
 
 
 
 
 
 
-- H - Update
 
 ALTER TABLE LoanApplication
ADD COLUMN NoOfDays INTEGER;

ALTER TABLE LoanApplication
ADD COLUMN ApplicableRate DOUBLE;

ALTER TABLE LoanApplication
ADD COLUMN ODRate DOUBLE;
 
 
 
 
 
 CREATE TABLE CancelledLoan (
    LoanID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) UNIQUE NOT null,
    CustomerNumber VARCHAR(20),
    GrantDate DATE,
    DocumentRefNo VARCHAR(12),
    DealAmount DECIMAL(15, 2),
    Remarks VARCHAR(250),
    Accrual DECIMAL(15, 2),
    Status INT,
    Authorized_By VARCHAR(50),
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber)
);
 

 -- Table to store Loan Recovery details
CREATE TABLE LoanRecovery (
    RecoveryID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) NOT NULL,
    CustomerNumber VARCHAR(20) NOT NULL,
    AccountTitle VARCHAR(100),
    CurrencyCode INT,
    CurrencyName VARCHAR(50),
    DealAmount DECIMAL(15, 2),
    ProfitAmount DECIMAL(15, 2),             -- From LoanFinancialDetails
    CalculatedAccrual DECIMAL(15, 2),        -- Accrual calculated at the time of recovery
    RecoveryAmount DECIMAL(15, 2),           -- Higher of ProfitAmount or CalculatedAccrual
    RecoveryDate DATE NOT NULL,              -- Date when recovery was performed
    OriginalGrantDate DATE,                  -- GrantDate from LoanApplication
    DaysSinceGrant INT,                      -- Days difference for accrual calculation
    RecoveredBy VARCHAR(50),                 -- UserID of the person performing recovery (Optional)
    RecoveryTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Exact time of recovery
    Status INT DEFAULT 1,                     -- Default status for the recovery record
    AuthorizedBy VARCHAR(50),                -- UserID who authorized the recovery (Optional)
    FOREIGN KEY (LoanNumber) REFERENCES LoanApplication(LoanNumber) ON DELETE NO ACTION, -- Prevent deleting LoanApp if recovery exists? Or CASCADE? Decide based on req.
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE NO ACTION,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE NO ACTION,
    FOREIGN KEY (RecoveredBy) REFERENCES users(userId) ON DELETE SET NULL, -- Optional link to user performing recovery
    FOREIGN KEY (AuthorizedBy) REFERENCES users(userId) ON DELETE SET NULL  -- Optional link to user authorizing recovery
);

-- Add a unique constraint if you want only one recovery record per loan
-- ALTER TABLE LoanRecovery ADD CONSTRAINT UNQ_Recovery_LoanNumber UNIQUE (LoanNumber);
-- Decide if you need this based on whether multiple recoveries are possible per loan.
 



--Monday - HOME

DROP TABLE CancelledLoan;

CREATE TABLE CancelledLoan (
    LoanID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) NOT null,
    CustomerNumber VARCHAR(20),
    GrantDate DATE,
    DocumentRefNo VARCHAR(12),
    DealAmount DECIMAL(15, 2),
    Remarks VARCHAR(250),
    Accrual DECIMAL(15, 2),
    Status INT,
    Authorized_By VARCHAR(50),
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber)
);



UPDATE BAHL.LOANAPPLICATION
SET LOANNUMBER='7412', CUSTOMERNUMBER='0081123456011', GRANTDATE='2025-04-14', DOCUMENTREFNO='ABCD74122025', DEALAMOUNT=2000.00, REMARKS='asd', ACCRUAL=23.63, STATUS=7, AUTHORIZED_BY=NULL, NOOFDAYS=30, APPLICABLERATE=14.38, ODRATE=16.0
WHERE LOANID=127;


DROP TABLE BASERATETABLE;

CREATE TABLE BaseRateTable (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    baseName VARCHAR(255) NOT NULL UNIQUE,
    baseRate DECIMAL(10, 4) null
);

INSERT INTO BaseRateTable (baseName, baseRate)
VALUES 
('1-Month KIBOR', 12.18),
('3-Month KIBOR', 12.45),
('6-Month KIBOR', 11.99),
('FIXED Rate', null);


-- Home work great


-- DB2 SQL to create the BookingTransactionTable
--CREATE TABLE BookingTransactionTable (
--    TransactionCode VARCHAR(5) NOT NULL,
--    VoucherNumber VARCHAR(50) NOT NULL,
--    TransactionNumber INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
--    AccountNumber VARCHAR(50) NOT NULL,
--    AccountTitle VARCHAR(100),
--    Currency VARCHAR(3),
--    DebitAmount DECIMAL(19, 2),
--    CreditAmount DECIMAL(19, 2),
--    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--    PRIMARY KEY (TransactionCode, VoucherNumber, TransactionNumber)
--);

DROP TABLE BOOKINGTRANSACTIONTABLE;

-- DB2 SQL to create the BookingTransactionTable (modified)
CREATE TABLE BookingTransactionTable (
    TransactionCode VARCHAR(5) NOT NULL,
    VoucherNumber VARCHAR(50) NOT NULL,
    TransactionNumber INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    AccountNumber VARCHAR(50) NOT NULL,
    AccountTitle VARCHAR(100),
    Currency VARCHAR(3),
    DebitAmount DECIMAL(19, 2),
    CreditAmount DECIMAL(19, 2),
    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (TransactionCode, VoucherNumber, TransactionNumber)
);



ALTER TABLE BookingTransactionTable
ADD COLUMN LoanNumber INTEGER;


DROP TABLE BOOKINGTRANSACTIONTABLE;

-- DB2 SQL to create the RecoveryTransactionTable
CREATE TABLE RecoveryTransactionTable (
    TransactionCode VARCHAR(5) NOT NULL,
    VoucherNumber VARCHAR(50) NOT NULL,
    TransactionNumber INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    AccountNumber VARCHAR(50) NOT NULL,
    AccountTitle VARCHAR(100),
    Currency VARCHAR(3),
    DebitAmount DECIMAL(19, 2),
    CreditAmount DECIMAL(19, 2),
    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (TransactionCode, VoucherNumber, TransactionNumber)
);




--Friday

CREATE TABLE UnauthorizedLoanLimits (
    LimitID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    LoanLimit DECIMAL(15, 2),
    LimitBalance DECIMAL(15, 2),
    CreatedBy VARCHAR(50),
    CreatedOn TIMESTAMP,
    UpdatedBy VARCHAR(50),
    UpdatedOn TIMESTAMP,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber),
    FOREIGN KEY (CreatedBy) REFERENCES users(userId) ON DELETE SET NULL,
    FOREIGN KEY (UpdatedBy) REFERENCES users(userId) ON DELETE SET NULL
);


ALTER TABLE UnauthorizedLoanLimits
ADD Status INT DEFAULT 1;

ALTER TABLE LoanLimits
ADD Status INT DEFAULT 9;

DELETE FROM BAHL.LOANLIMITS
WHERE LIMITID=203;





DELETE FROM BAHL.LOANLIMITS
WHERE LIMITID=221;


-- Wednesday

DROP TABLE RECOVERYTRANSACTIONTABLE;

CREATE TABLE RecoveryTransactionTable (
    TransactionCode VARCHAR(5) NOT NULL,
    VoucherNumber VARCHAR(50) NOT NULL,
    TransactionNumber INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 0001, INCREMENT BY 1),
    AccountNumber VARCHAR(50) NOT NULL,
    AccountTitle VARCHAR(100),
    Currency VARCHAR(3),
    DebitAmount DECIMAL(19, 2),
    CreditAmount DECIMAL(19, 2),
    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    VoucherId INTEGER, -- Make sure this column exists
    PRIMARY KEY (TransactionCode, VoucherNumber, TransactionNumber)
);


SELECT
    TransactionCode,
    VoucherNumber AS loanNumber,
    TransactionNumber,
    AccountNumber,
    AccountTitle,
    Currency,
    DebitAmount,
    CreditAmount,
    TransactionDate,
    VoucherId,
    VARCHAR_FORMAT(VoucherId, '0000') AS FormattedVoucherId
FROM
    RecoveryTransactionTable;


DELETE FROM LOANLIMITS
WHERE LIMITID=241;

-- Loan Book

SELECT
    CASE
        WHEN LENGTH(BT.AccountNumber) = 13 AND BT.AccountNumber LIKE '%%%%%%%%%%%' -- Check if it's 13 digits
        THEN AT.BRANCHCODE || '-' ||
             SUBSTR(BT.AccountNumber, 1, 4) || '-' ||
             SUBSTR(BT.AccountNumber, 5, 6) || '-' ||
             SUBSTR(BT.AccountNumber, 11, 2) || '-' ||
             SUBSTR(BT.AccountNumber, 13, 1)
        ELSE BT.AccountNumber
    END AS AccountNumber,
    BT.TRANSACTIONCODE,
    BT.TRANSACTIONNUMBER,
    BT.VOUCHERNUMBER,
    BT.ACCOUNTTITLE,
    BT.TRANSACTIONDATE,
    BT.DEBITAMOUNT,
    BT.CREDITAMOUNT,
    BT.CURRENCY,
    BT.LOANNUMBER
FROM
    BAHL.BOOKINGTRANSACTIONTABLE BT
LEFT JOIN
    BAHL.ACCOUNTTABLE AT ON BT.AccountNumber = AT.CustomerNumber
WHERE
    BT.VoucherNumber = 1234;


-- RecoveryTran

SELECT
    CASE
        WHEN LENGTH(RT.AccountNumber) = 13 AND RT.AccountNumber LIKE '%%%%%%%%%%%' -- Check if it's 13 digits
        THEN AT.BRANCHCODE || '-' ||
             SUBSTR(RT.AccountNumber, 1, 4) || '-' ||
             SUBSTR(RT.AccountNumber, 5, 6) || '-' ||
             SUBSTR(RT.AccountNumber, 11, 2) || '-' ||
             SUBSTR(RT.AccountNumber, 13, 1)
        ELSE RT.AccountNumber
    END AS AccountNumber,
    RT.TransactionCode,
    RT.TransactionNumber,
    RT.VoucherNumber,
    RT.AccountTitle,
    RT.TransactionDate,
    RT.DebitAmount,
    RT.CreditAmount,
    RT.Currency,
    LA.LoanId, -- LoanId column from LoanApplicationTable
    RT.VoucherId AS LoanNumber -- Assuming VoucherId corresponds to LoanNumber
FROM
    BAHL.RECOVERYTRANSACTIONTABLE RT
LEFT JOIN
    BAHL.ACCOUNTTABLE AT ON RT.AccountNumber = AT.CustomerNumber
LEFT JOIN
    BAHL.LOANAPPLICATION LA ON RT.VoucherNumber = LA.loanNumber -- Joining on VoucherNumber
WHERE
    RT.VoucherNumber = 9000
ORDER BY
    RT.VoucherNumber;



-- 3rd last


SELECT
    LA.LoanID,
    B.BranchCode,
    LA.DEALAMOUNT,
    CASE
        WHEN LA.Status = 9 THEN 'Authorized'
        WHEN LA.Status = 1 THEN 'Unauthorized'
        WHEN LA.Status = 2 THEN 'Unauthorized Modification'
        WHEN LA.Status = 7 THEN 'Unauthorized Recovery'
        WHEN LA.Status = 8 THEN 'Recovered'
        WHEN LA.Status = 987 THEN 'Rejected'
        ELSE 'Unknown'
    END AS StatusText,
    LA.GrantDate AS LoanDate,
    86036 AS TransactionCode,  -- Set TransactionCode to 86036
    CASE
        WHEN LA.Status = 9 THEN 'Authorized'
        WHEN LA.Status = 1 THEN 'Unauthorized'
        WHEN LA.Status = 2 THEN 'Unauthorized Modification'
        WHEN LA.Status = 7 THEN 'Unauthorized Recovery'
        WHEN LA.Status = 8 THEN 'Recovered'
        WHEN LA.Status = 987 THEN 'Rejected'
        ELSE 'Unknown'
    END AS Description,
    CASE
        WHEN LENGTH(LA.CustomerNumber) = 13 AND LA.CustomerNumber LIKE '%%%%%%%%%%%'
        THEN B.BranchCode || '-' ||
             SUBSTR(LA.CustomerNumber, 1, 4) || '-' ||
             SUBSTR(LA.CustomerNumber, 5, 6) || '-' ||
             SUBSTR(LA.CustomerNumber, 11, 2) || '-' ||
             SUBSTR(LA.CustomerNumber, 13, 1)
        ELSE LA.CustomerNumber
    END AS FormattedAccountNumber
FROM
    BAHL.LoanApplication LA
LEFT JOIN
    BAHL.CustomerInfo CI ON LA.CustomerNumber = CI.CustomerNumber
LEFT JOIN
    BAHL.Branches B ON CI.BranchCode = B.BranchCode
ORDER BY
    LA.LoanID;



SELECT
    CL.LoanID,
    B.BranchCode,
    CL.DealAmount,
    CASE
        WHEN CL.Status = 1 THEN 'Unauthorized Cancellation'
        WHEN CL.Status = 9 THEN 'Cancelled'
        ELSE 'Unknown'
    END AS StatusText,
    CL.GrantDate AS LoanDate,
    86036 AS TransactionCode,  -- Set TransactionCode to 86036
    CASE
        WHEN CL.Status = 1 THEN 'Unauthorized Cancellation'
        WHEN CL.Status = 9 THEN 'Cancelled'
        ELSE 'Unknown'
    END AS Description,
    CASE
        WHEN LENGTH(CL.CustomerNumber) = 13 AND CL.CustomerNumber LIKE '%%%%%%%%%%%'
        THEN B.BranchCode || '-' ||
             SUBSTR(CL.CustomerNumber, 1, 4) || '-' ||
             SUBSTR(CL.CustomerNumber, 5, 6) || '-' ||
             SUBSTR(CL.CustomerNumber, 11, 2) || '-' ||
             SUBSTR(CL.CustomerNumber, 13, 1)
        ELSE CL.CustomerNumber
    END AS FormattedAccountNumber
FROM
    BAHL.CancelledLoan CL
LEFT JOIN
    BAHL.CustomerInfo CI ON CL.CustomerNumber = CI.CustomerNumber
LEFT JOIN
    BAHL.Branches B ON CI.BranchCode = B.BranchCode
ORDER BY
    CL.LoanID;



-- Updated


SELECT
    LA.LoanID,
    B.BranchCode,
    LA.DEALAMOUNT,
    CASE
        WHEN LA.Status = 9 THEN 'Authorized'
        WHEN LA.Status = 1 THEN 'Unauthorized'
        WHEN LA.Status = 2 THEN 'Unauthorized Modification'
        WHEN LA.Status = 7 THEN 'Unauthorized Recovery'
        WHEN LA.Status = 8 THEN 'Recovered'
        WHEN LA.Status = 987 THEN 'Rejected'
        ELSE 'Unknown'
    END AS StatusText,
    LA.GrantDate AS LoanDate,
    86036 AS TransactionCode,  -- Set TransactionCode to 86036
    CASE
        WHEN LA.Status = 9 THEN 'Authorized'
        WHEN LA.Status = 1 THEN 'Unauthorized'
        WHEN LA.Status = 2 THEN 'Unauthorized Modification'
        WHEN LA.Status = 7 THEN 'Unauthorized Recovery'
        WHEN LA.Status = 8 THEN 'Recovered'
        WHEN LA.Status = 987 THEN 'Rejected'
        ELSE 'Unknown'
    END AS Description,
    CASE
        WHEN LENGTH(LA.CustomerNumber) = 13 AND LA.CustomerNumber LIKE '%%%%%%%%%%%'
        THEN B.BranchCode || '-' ||
             SUBSTR(LA.CustomerNumber, 1, 4) || '-' ||
             SUBSTR(LA.CustomerNumber, 5, 6) || '-' ||
             SUBSTR(LA.CustomerNumber, 11, 2) || '-' ||
             SUBSTR(LA.CustomerNumber, 13, 1)
        ELSE LA.CustomerNumber
    END AS FormattedAccountNumber,
    'Active Loan' AS LoanType
FROM
    BAHL.LoanApplication LA
LEFT JOIN
    BAHL.CustomerInfo CI ON LA.CustomerNumber = CI.CustomerNumber
LEFT JOIN
    BAHL.Branches B ON CI.BranchCode = B.BranchCode

UNION ALL

SELECT
    CL.LoanID,
    B.BranchCode,
    CL.DealAmount,
    CASE
        WHEN CL.Status = 1 THEN 'Unauthorized Cancellation'
        WHEN CL.Status = 9 THEN 'Cancelled'
        ELSE 'Unknown'
    END AS StatusText,
    CL.GrantDate AS LoanDate,
    86036 AS TransactionCode,  -- Set TransactionCode to 86036
    CASE
        WHEN CL.Status = 1 THEN 'Unauthorized Cancellation'
        WHEN CL.Status = 9 THEN 'Cancelled'
        ELSE 'Unknown'
    END AS Description,
    CASE
        WHEN LENGTH(CL.CustomerNumber) = 13 AND CL.CustomerNumber LIKE '%%%%%%%%%%%'
        THEN B.BranchCode || '-' ||
             SUBSTR(CL.CustomerNumber, 1, 4) || '-' ||
             SUBSTR(CL.CustomerNumber, 5, 6) || '-' ||
             SUBSTR(CL.CustomerNumber, 11, 2) || '-' ||
             SUBSTR(CL.CustomerNumber, 13, 1)
        ELSE CL.CustomerNumber
    END AS FormattedAccountNumber,
    'Cancelled Loan' AS LoanType
FROM
    BAHL.CancelledLoan CL
LEFT JOIN
    BAHL.CustomerInfo CI ON CL.CustomerNumber = CI.CustomerNumber
LEFT JOIN
    BAHL.Branches B ON CI.BranchCode = B.BranchCode;




-- Updated Final - to be implemented


SELECT
    LA.LoanID,
    B.BranchCode,
    CASE LA.Status
        WHEN 8 THEN LA.DEALAMOUNT
        ELSE -LA.DEALAMOUNT
    END AS DEALAMOUNT,
    CASE LA.Status
        WHEN 9 THEN 'Authorized'
        WHEN 1 THEN 'Unauthorized'
        WHEN 2 THEN 'Unauthorized Modification'
        WHEN 7 THEN 'Unauthorized Recovery'
        WHEN 8 THEN 'Recovered'
        WHEN 987 THEN 'Rejected'
        ELSE 'Unknown'
    END AS StatusText,
    LA.GrantDate AS LoanDate,
    CASE LA.Status
        WHEN 9 THEN CAST(86036 AS INTEGER)
        WHEN 1 THEN CAST(86036 AS INTEGER)
        WHEN 2 THEN CAST(86036 AS INTEGER)
        WHEN 7 THEN CAST(86036 AS INTEGER)
        WHEN 8 THEN CAST(36091 AS INTEGER)
        WHEN 987 THEN NULL
        ELSE NULL
    END AS TransactionCode,
    CASE LA.Status
        WHEN 9 THEN 'Authorized'
        WHEN 1 THEN 'Unauthorized'
        WHEN 2 THEN 'Unauthorized Modification'
        WHEN 7 THEN 'Unauthorized Recovery'
        WHEN 8 THEN 'Recovered'
        WHEN 987 THEN 'Rejected'
        ELSE 'Unknown'
    END AS Description,
    CASE
        WHEN LENGTH(LA.CustomerNumber) = 13 AND LA.CustomerNumber LIKE '%%%%%%%%%%%'
        THEN B.BranchCode || '-' ||
             SUBSTR(LA.CustomerNumber, 1, 4) || '-' ||
             SUBSTR(LA.CustomerNumber, 5, 6) || '-' ||
             SUBSTR(LA.CustomerNumber, 11, 2) || '-' ||
             SUBSTR(LA.CustomerNumber, 13, 1)
        ELSE LA.CustomerNumber
    END AS FormattedAccountNumber,
    'Active Loan' AS LoanType
FROM
    BAHL.LoanApplication LA
LEFT JOIN
    BAHL.CustomerInfo CI ON LA.CustomerNumber = CI.CustomerNumber
LEFT JOIN
    BAHL.Branches B ON CI.BranchCode = B.BranchCode

UNION ALL

SELECT
    CL.LoanID,
    B.BranchCode,
    CL.DealAmount AS DEALAMOUNT,
    CASE CL.Status
        WHEN 1 THEN 'Unauthorized Cancellation'
        WHEN 9 THEN 'Cancelled'
        ELSE 'Unknown'
    END AS StatusText,
    CL.GrantDate AS LoanDate,
    CASE CL.Status
        WHEN 1 THEN CAST(NULL AS INTEGER) -- Explicitly cast NULL to INTEGER
        WHEN 9 THEN CAST(NULL AS INTEGER) -- Explicitly cast NULL to INTEGER
        ELSE CAST(NULL AS INTEGER)       -- Explicitly cast NULL to INTEGER
    END AS TransactionCode,
    CASE CL.Status
        WHEN 1 THEN 'Unauthorized Cancellation'
        WHEN 9 THEN 'Cancelled'
        ELSE 'Unknown'
    END AS Description,
    CASE
        WHEN LENGTH(CL.CustomerNumber) = 13 AND CL.CustomerNumber LIKE '%%%%%%%%%%%'
        THEN B.BranchCode || '-' ||
             SUBSTR(CL.CustomerNumber, 1, 4) || '-' ||
             SUBSTR(CL.CustomerNumber, 5, 6) || '-' ||
             SUBSTR(CL.CustomerNumber, 11, 2) || '-' ||
             SUBSTR(CL.CustomerNumber, 13, 1)
        ELSE CL.CustomerNumber
    END AS FormattedAccountNumber,
    'Cancelled Loan' AS LoanType
FROM
    BAHL.CancelledLoan CL
LEFT JOIN
    BAHL.CustomerInfo CI ON CL.CustomerNumber = CI.CustomerNumber
LEFT JOIN
    BAHL.Branches B ON CI.BranchCode = B.BranchCode;



-- daterange

WITH CombinedData AS (
    SELECT
        LA.LoanID,
        B.BranchCode,
        CASE LA.Status
            WHEN 7 THEN -LA.DEALAMOUNT
            WHEN 8 THEN -LA.DEALAMOUNT
            ELSE LA.DEALAMOUNT
        END AS DEALAMOUNT,
        CASE LA.Status
            WHEN 9 THEN 'Authorized'
            WHEN 1 THEN 'Unauthorized'
            WHEN 2 THEN 'Unauthorized Modification'
            WHEN 7 THEN 'Unauthorized Recovery'
            WHEN 8 THEN 'Recovered'
            WHEN 987 THEN 'Rejected'
            WHEN 0 THEN 'Unauthorized Cancellation'
            ELSE NULL
        END AS StatusText,
        LA.GrantDate AS LoanDate,
        CASE LA.Status
            WHEN 9 THEN CAST(86036 AS INTEGER)
            WHEN 1 THEN CAST(86036 AS INTEGER)
            WHEN 2 THEN CAST(86036 AS INTEGER)
            WHEN 7 THEN CAST(86036 AS INTEGER)
            WHEN 8 THEN CAST(36091 AS INTEGER)
            WHEN 987 THEN NULL
            WHEN 0 THEN CAST(NULL AS INTEGER)
            ELSE NULL
        END AS TransactionCode,
        CASE LA.Status
            WHEN 9 THEN 'Authorized'
            WHEN 1 THEN 'Unauthorized'
            WHEN 2 THEN 'Unauthorized Modification'
            WHEN 7 THEN 'Unauthorized Recovery'
            WHEN 8 THEN 'Recovered'
            WHEN 987 THEN 'Rejected'
            WHEN 0 THEN 'Unauthorized Cancellation'
            ELSE NULL
        END AS Description,
        CASE
            WHEN LENGTH(LA.CustomerNumber) = 13 AND LA.CustomerNumber LIKE '%%%%%%%%%%%'
            THEN B.BranchCode || '-' ||
                 SUBSTR(LA.CustomerNumber, 1, 4) || '-' ||
                 SUBSTR(LA.CustomerNumber, 5, 6) || '-' ||
                 SUBSTR(LA.CustomerNumber, 11, 2) || '-' ||
                 SUBSTR(LA.CustomerNumber, 13, 1)
            ELSE LA.CustomerNumber
        END AS FormattedAccountNumber,
        'Active Loan' AS LoanType,
        1 AS SourceOrder
    FROM
        BAHL.LoanApplication LA
    LEFT JOIN
        BAHL.CustomerInfo CI ON LA.CustomerNumber = CI.CustomerNumber
    LEFT JOIN
        BAHL.Branches B ON CI.BranchCode = B.BranchCode
    WHERE
        LA.GrantDate BETWEEN '2025-06-30' AND '2025-07-03'

    UNION ALL

    SELECT
        CL.ORIGINALLOANID AS LoanID,
        B.BranchCode,
        CL.DealAmount AS DEALAMOUNT,
        CASE CL.Status
            WHEN 1 THEN 'Unauthorized Cancellation'
            WHEN 9 THEN 'Cancelled'
            ELSE NULL
        END AS StatusText,
        CL.GrantDate AS LoanDate,
        CASE CL.Status
            WHEN 1 THEN CAST(NULL AS INTEGER)
            WHEN 9 THEN CAST(NULL AS INTEGER)
            ELSE CAST(NULL AS INTEGER)
        END AS TransactionCode,
        CASE CL.Status
            WHEN 1 THEN 'Unauthorized Cancellation'
            WHEN 9 THEN 'Cancelled'
            ELSE NULL
        END AS Description,
        CASE
            WHEN LENGTH(CL.CustomerNumber) = 13 AND CL.CustomerNumber LIKE '%%%%%%%%%%%'
            THEN B.BranchCode || '-' ||
                 SUBSTR(CL.CustomerNumber, 1, 4) || '-' ||
                 SUBSTR(CL.CustomerNumber, 5, 6) || '-' ||
                 SUBSTR(CL.CustomerNumber, 11, 2) || '-' ||
                 SUBSTR(CL.CustomerNumber, 13, 1)
            ELSE CL.CustomerNumber
        END AS FormattedAccountNumber,
        'Cancelled Loan' AS LoanType,
        2 AS SourceOrder
    FROM
        BAHL.CancelledLoan CL
    LEFT JOIN
        BAHL.CustomerInfo CI ON CL.CustomerNumber = CI.CustomerNumber
    LEFT JOIN
        BAHL.Branches B ON CI.BranchCode = B.BranchCode
    WHERE
        CL.GrantDate BETWEEN '2025-06-30' AND '2025-07-03'
),
RankedData AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY LoanID ORDER BY SourceOrder) AS rn
    FROM
        CombinedData
)
SELECT
    LoanID,
    BranchCode,
    DEALAMOUNT,
    StatusText,
    LoanDate,
    TransactionCode,
    Description,
    FormattedAccountNumber,
    LoanType
FROM
    RankedData
WHERE
    rn = 1
ORDER BY
    LoanID;
    
    
    
-- Loan Voucher Range.



WITH CombinedData AS (
    SELECT
        LA.LoanID,
        B.BranchCode,
        CASE LA.Status
            WHEN 7 THEN -LA.DEALAMOUNT
            WHEN 8 THEN -LA.DEALAMOUNT
            ELSE LA.DEALAMOUNT
        END AS DEALAMOUNT,
        CASE LA.Status
            WHEN 9 THEN 'Authorized'
            WHEN 1 THEN 'Unauthorized'
            WHEN 2 THEN 'Unauthorized'
            WHEN 7 THEN 'Unauthorized Recovery'
            WHEN 8 THEN 'Recovered'
            WHEN 987 THEN 'Rejected'
            WHEN 0 THEN 'Unauthorized Cancellation'
        END AS StatusText,
        LA.GrantDate AS LoanDate,
        CASE LA.Status
            WHEN 9 THEN CAST(86036 AS INTEGER)
            WHEN 1 THEN CAST(86036 AS INTEGER)
            WHEN 2 THEN CAST(86036 AS INTEGER)
            WHEN 7 THEN CAST(86036 AS INTEGER)
            WHEN 8 THEN CAST(36091 AS INTEGER)
            WHEN 987 THEN NULL
            WHEN 0 THEN CAST(NULL AS INTEGER)
            ELSE NULL
        END AS TransactionCode,
        CASE LA.Status
            WHEN 9 THEN 'Authorized'
            WHEN 1 THEN 'Unauthorized'
            WHEN 2 THEN 'Unauthorized'
            WHEN 7 THEN 'Unauthorized Recovery'
            WHEN 8 THEN 'Recovered'
            WHEN 987 THEN 'Rejected'
            WHEN 0 THEN 'Unauthorized Cancellation'
        END AS Description,
        CASE
            WHEN LENGTH(LA.CustomerNumber) = 13 AND LA.CustomerNumber LIKE '%%%%%%%%%%%'
            THEN B.BranchCode || '-' ||
                 SUBSTR(LA.CustomerNumber, 1, 4) || '-' ||
                 SUBSTR(LA.CustomerNumber, 5, 6) || '-' ||
                 SUBSTR(LA.CustomerNumber, 11, 2) || '-' ||
                 SUBSTR(LA.CustomerNumber, 13, 1)
            ELSE LA.CustomerNumber
        END AS FormattedAccountNumber,
        'Active Loan' AS LoanType,
        1 AS SourceOrder
    FROM
        BAHL.LoanApplication LA
    LEFT JOIN
        BAHL.CustomerInfo CI ON LA.CustomerNumber = CI.CustomerNumber
    LEFT JOIN
        BAHL.Branches B ON CI.BranchCode = B.BranchCode
    WHERE
        LA.LoanID BETWEEN 100 AND 600

    UNION ALL

    SELECT
        CL.ORIGINALLOANID AS LoanID,
        B.BranchCode,
        CL.DealAmount AS DEALAMOUNT,
        CASE CL.Status
            WHEN 1 THEN 'Unauthorized Cancellation'
            WHEN 9 THEN 'Cancelled'
        END AS StatusText,
        CL.GrantDate AS LoanDate,
        CASE CL.Status
            WHEN 1 THEN CAST(NULL AS INTEGER)
            WHEN 9 THEN CAST(NULL AS INTEGER)
        END AS TransactionCode,
        CASE CL.Status
            WHEN 1 THEN 'Unauthorized Cancellation'
            WHEN 9 THEN 'Cancelled'
        END AS Description,
        CASE
            WHEN LENGTH(CL.CustomerNumber) = 13 AND CL.CustomerNumber LIKE '%%%%%%%%%%%'
            THEN B.BranchCode || '-' ||
                 SUBSTR(CL.CustomerNumber, 1, 4) || '-' ||
                 SUBSTR(CL.CustomerNumber, 5, 6) || '-' ||
                 SUBSTR(CL.CustomerNumber, 11, 2) || '-' ||
                 SUBSTR(CL.CustomerNumber, 13, 1)
            ELSE CL.CustomerNumber
        END AS FormattedAccountNumber,
        'Cancelled Loan' AS LoanType,
        2 AS SourceOrder
    FROM
        BAHL.CancelledLoan CL
    LEFT JOIN
        BAHL.CustomerInfo CI ON CL.CustomerNumber = CI.CustomerNumber
    LEFT JOIN
        BAHL.Branches B ON CI.BranchCode = B.BranchCode
    WHERE
        CL.CustomerNumber IN (SELECT CustomerNumber FROM BAHL.LoanApplication WHERE LoanID BETWEEN 100 AND 600)
        AND CL.Status IN (1, 9)
),
RankedData AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY LoanID ORDER BY SourceOrder) AS rn
    FROM
        CombinedData
)
SELECT
    LoanID,
    BranchCode,
    DEALAMOUNT,
    StatusText,
    LoanDate,
    TransactionCode,
    Description,
    FormattedAccountNumber,
    LoanType
FROM
    RankedData
WHERE
    rn = 1
ORDER BY
    LoanID;



-- loans report


ALTER TABLE CancelledLoan
ADD COLUMN NoOfDays INTEGER;

ALTER TABLE CancelledLoan
ADD COLUMN ApplicableRate DOUBLE;

ALTER TABLE CancelledLoan
ADD COLUMN ODRate DOUBLE;




WITH CombinedData AS (
    SELECT
        LA.LoanID,
        LA.LoanNumber,
        LA.CustomerNumber,
        LA.GrantDate,
        LA.DocumentRefNo,
        LA.DealAmount,
        LA.Remarks,
        LA.Accrual,
        LA.Status,
        LA.Authorized_By,
        LA.NoOfDays,
        LA.ApplicableRate,
        LA.ODRate,
        B.BranchCode,
        B.BranchName,
        CASE LA.Status
            WHEN 7 THEN -LA.DEALAMOUNT
            WHEN 8 THEN -LA.DEALAMOUNT
            ELSE LA.DEALAMOUNT
        END AS DEALAMOUNT_ADJUSTED,
        CASE LA.Status
            WHEN 9 THEN 'Authorized'
            WHEN 1 THEN 'Unauthorized'
            WHEN 2 THEN 'Unauthorized Modification'
            WHEN 7 THEN 'Unauthorized Recovery'
            WHEN 8 THEN 'Recovered'
            WHEN 987 THEN 'Rejected'
            WHEN 0 THEN 'Unauthorized Cancellation'
            ELSE NULL
        END AS StatusText,
        CASE LA.Status
            WHEN 9 THEN CAST(86036 AS INTEGER)
            WHEN 1 THEN CAST(86036 AS INTEGER)
            WHEN 2 THEN CAST(86036 AS INTEGER)
            WHEN 7 THEN CAST(86036 AS INTEGER)
            WHEN 8 THEN CAST(36091 AS INTEGER)
            WHEN 987 THEN NULL
            WHEN 0 THEN CAST(NULL AS INTEGER)
            ELSE NULL
        END AS TransactionCode,
        CASE LA.Status
            WHEN 9 THEN 'Authorized'
            WHEN 1 THEN 'Unauthorized'
            WHEN 2 THEN 'Unauthorized Modification'
            WHEN 7 THEN 'Unauthorized Recovery'
            WHEN 8 THEN 'Recovered'
            WHEN 987 THEN 'Rejected'
            WHEN 0 THEN 'Unauthorized Cancellation'
            ELSE NULL
        END AS Description,
        CASE
            WHEN LENGTH(LA.CustomerNumber) = 13 AND LA.CustomerNumber LIKE '%%%%%%%%%%%'
            THEN B.BranchCode || '-' ||
                 SUBSTR(LA.CustomerNumber, 1, 4) || '-' ||
                 SUBSTR(LA.CustomerNumber, 5, 6) || '-' ||
                 SUBSTR(LA.CustomerNumber, 11, 2) || '-' ||
                 SUBSTR(LA.CustomerNumber, 13, 1)
            ELSE LA.CustomerNumber
        END AS FormattedAccountNumber,
        'Active Loan' AS LoanType,
        1 AS SourceOrder
    FROM
        BAHL.LoanApplication LA
    LEFT JOIN
        BAHL.CustomerInfo CI ON LA.CustomerNumber = CI.CustomerNumber
    LEFT JOIN
        BAHL.Branches B ON CI.BranchCode = B.BranchCode

    UNION ALL

    SELECT
        CL.ORIGINALLOANID AS LoanID,
        CL.LoanNumber,
        CL.CustomerNumber,
        CL.GrantDate,
        CL.DocumentRefNo,
        CL.DealAmount,
        CL.Remarks,
        CL.Accrual,
        CL.Status,
        CL.Authorized_By,
        CL.NoOfDays,
        CL.ApplicableRate,
        CL.ODRate,
        B.BranchCode,
        B.BranchName,
        CL.DealAmount AS DEALAMOUNT_ADJUSTED,
        CASE CL.Status
            WHEN 1 THEN 'Unauthorized Cancellation'
            WHEN 9 THEN 'Cancelled'
            ELSE NULL
        END AS StatusText,
        CASE CL.Status
            WHEN 1 THEN CAST(NULL AS INTEGER)
            WHEN 9 THEN CAST(NULL AS INTEGER)
            ELSE CAST(NULL AS INTEGER)
        END AS TransactionCode,
        CASE CL.Status
            WHEN 1 THEN 'Unauthorized Cancellation'
            WHEN 9 THEN 'Cancelled'
            ELSE NULL
        END AS Description,
        CASE
            WHEN LENGTH(CL.CustomerNumber) = 13 AND CL.CustomerNumber LIKE '%%%%%%%%%%%'
            THEN B.BranchCode || '-' ||
                 SUBSTR(CL.CustomerNumber, 1, 4) || '-' ||
                 SUBSTR(CL.CustomerNumber, 5, 6) || '-' ||
                 SUBSTR(CL.CustomerNumber, 11, 2) || '-' ||
                 SUBSTR(CL.CustomerNumber, 13, 1)
            ELSE CL.CustomerNumber
        END AS FormattedAccountNumber,
        'Cancelled Loan' AS LoanType,
        2 AS SourceOrder
    FROM
        BAHL.CancelledLoan CL
    LEFT JOIN
        BAHL.CustomerInfo CI ON CL.CustomerNumber = CI.CustomerNumber
    LEFT JOIN
        BAHL.Branches B ON CI.BranchCode = B.BranchCode
),
RankedData AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY LoanID ORDER BY SourceOrder) AS rn
    FROM
        CombinedData
)
SELECT
    LoanID,
    LoanNumber,
    CustomerNumber,
    GrantDate,
    DocumentRefNo,
    DealAmount,
    Remarks,
    Accrual,
    Status,
    Authorized_By,
    NoOfDays,
    ApplicableRate,
    ODRate,
    BranchCode,
    BranchName,
    DEALAMOUNT_ADJUSTED,
    StatusText,
    TransactionCode,
    Description,
    FormattedAccountNumber,
    LoanType
FROM
    RankedData
WHERE
    rn = 1
ORDER BY
    LoanID;

    
SELECT DISTINCT
    CASE
        WHEN LENGTH(BT.AccountNumber) = 13 AND BT.AccountNumber LIKE '%%%%%%%%%%%%%'
        THEN SUBSTR(BT.AccountNumber, 5, 6)
        ELSE BT.AccountNumber
    END AS AccountNumber,
    BT.TRANSACTIONCODE,
    BT.TRANSACTIONNUMBER,
    BT.VOUCHERNUMBER,
    BT.ACCOUNTTITLE,
    BT.TRANSACTIONDATE,
    BT.DEBITAMOUNT,
    BT.CREDITAMOUNT,
    BT.CURRENCY,
    BT.LOANNUMBER || '/' || YEAR(BT.TRANSACTIONDATE) AS LoanNumberWithYear
FROM
    BOOKINGTRANSACTIONTABLE BT
LEFT JOIN
    ACCOUNTTABLE AT ON BT.AccountNumber = AT.CustomerNumber
WHERE
    BT.VoucherNumber = 0000
