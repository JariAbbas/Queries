

CREATE TABLE testing 
(
	id int PRIMARY KEY NOT NULL,
	name varchar(255)
)

DELETE FROM BAHL.USERS
WHERE USERID='user123';
DELETE FROM BAHL.USERS
WHERE USERID='user456';

DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=1;
DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=2;
DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=3;
DELETE FROM BAHL.BRANCH
WHERE BRANCHCODE=4;





-- Create Branch table
CREATE TABLE branches (
    branchCode INT PRIMARY KEY NOT NULL,
    branchName VARCHAR(50),
    location VARCHAR(50),
    city VARCHAR(50)
);

-- Create User table
CREATE TABLE users (
    userId VARCHAR(50) PRIMARY KEY NOT NULL,
    password VARCHAR(50),
    status VARCHAR(1),
    branchCode INT,
    userIPAddress VARCHAR(50),
    lastSignOnDate TIMESTAMP,
    userRole VARCHAR(50),
    module VARCHAR(50),
    FOREIGN KEY (branchCode) REFERENCES branches(branchCode)
);

-- Create Activity table
CREATE TABLE activities (
    activityId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    userId VARCHAR(50),
    activity VARCHAR(50),
    FOREIGN KEY (userId) REFERENCES users(userId)
);










INSERT INTO branches (branchCode, branchName, location, city)
VALUES
  (1001, 'Karachi Main', 'I. I. Chundrigar', 'Karachi'),
  (1002, 'Center Ponit', 'Qayuumabad', 'Karachi'),
  (3001, 'Jinnah Super', 'Blue Area', 'Islamabad'),
  (4001, 'Liberty Branch', 'Noor Jahan Rd', 'Lahore'),
  (5001, 'Bosan Street', 'Multan Road', 'Multan');

INSERT INTO users (userId, password, status, branchCode, userIPAddress, lastSignOnDate, userRole, MODULE) VALUES
('TellerUsr', 'pass123', 'I', 1001, '10.51.41.23', CURRENT_TIMESTAMP, 'User', NULL),
('Creditusr', 'secure456', 'A', 1002, '10.51.41.24', CURRENT_TIMESTAMP, 'User', 'Credit Management'),
('TradeUsr', 'trade789', 'I', 3001, '10.51.41.25', CURRENT_TIMESTAMP, 'Trader', NULL),
('CRMUsr', 'crm1011', 'I', 4001, 'Get from System', CURRENT_TIMESTAMP, 'CRM', NULL),
('TDRUsr', 'tdr1213', 'I', 5001, '10.51.41.26', CURRENT_TIMESTAMP, 'TDR', NULL),
('TellerAuth', 'tellerAuth1415', 'I', 1001, '10.51.41.27', CURRENT_TIMESTAMP, 'TellerAuth', NULL),
('CreditAuth', 'creditAuth1617', 'A', 1002, '10.51.41.28', CURRENT_TIMESTAMP, 'CreditAuth', 'Credit Management'),
('TradeAuth', 'tradeAuth1819', 'I', 3001, '10.51.41.29', CURRENT_TIMESTAMP, 'TradeAuth', NULL),
('CRMAuth', 'crmAuth2021', 'I', 4001, '10.51.41.30', CURRENT_TIMESTAMP, 'CRMAuth', NULL),
('TDRAuth', 'tdrAuth2223', 'I', 5001, '10.51.41.31', CURRENT_TIMESTAMP, 'TDRAuth', NULL);



INSERT INTO activities (userId, activity) VALUES
('Creditusr', 'ASGLIM'),
('Creditusr', 'BOOK'),
('Creditusr', 'MODIFY'),
('Creditusr', 'CANCEL'),
('Creditusr', 'INQUIRE'),
('Creditusr', 'RECOVERY'),
('Creditusr', 'REPORT'),
('CreditAuth', 'BOOKAUTH'),
('CreditAuth', 'MODIFYAUTH'),
('CreditAuth', 'CANCELAUTH'),
('CreditAuth', 'INQUIREAUTH'),
('CreditAuth', 'RECOVERYAUTH'),
('CreditAuth', 'REPORT');

DROP TABLE UserDates;
DROP TABLE ACTIVITIES;
DROP TABLE BRANCHES;
DROP TABLE USERS;


CREATE TABLE UserDates  (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    userId VARCHAR(50),
    branchCode INT,
    branchName VARCHAR(100),
    currentDate TIMESTAMP NOT NULL,
    previousDate TIMESTAMP NULL, -- âœ… NULL allowed now
    FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE
);


ALTER TABLE UserDates
ADD COLUMN previousDate TIMESTAMP;


CREATE TABLE CustomerInfo (
    CustomerID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,  -- Auto-increment ID
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,  -- User-facing unique ID
    BranchCode INT NOT NULL,
    Category CHAR(1) CHECK (Category IN ('G', 'C'))
);

DROP TABLE CustomerInfo;

CREATE TABLE CurrencyTable (
    CurrencyCode int PRIMARY KEY NOT null,
    CurrencyName VARCHAR(50) NOT NULL,
    CurrencyRate Decimal(15,2) NOT NULL
);

CREATE TABLE AccountTable (
    AccountId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    BranchCode INT NOT NULL,
    AccountTitle VARCHAR(100) NOT NULL,
    CurrencyCode int NOT NULL,
    Balance DECIMAL(15,2) DEFAULT 0.00,  -- Loan balance (amount given or due)
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE CASCADE,
    FOREIGN KEY (BranchCode) REFERENCES branches(BranchCode) ON DELETE CASCADE,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE CASCADE
);

CREATE TABLE GLAccountsTable (
    AccountId INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    BranchCode INT NOT NULL,
    AccountTitle VARCHAR(100) NOT NULL,
    CurrencyCode int NOT NULL,
    Balance DECIMAL(15,2) DEFAULT 0.00,  -- Loan balance (amount given or due)
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber) ON DELETE CASCADE,
    FOREIGN KEY (BranchCode) REFERENCES branches(BranchCode) ON DELETE CASCADE,
    FOREIGN KEY (CurrencyCode) REFERENCES CurrencyTable(CurrencyCode) ON DELETE CASCADE
);

DROP TABLE ACCOUNTTABLE ;

DROP TABLE LOANLIMITS  ;

DROP TABLE CUSTOMERGLMAPPING;

-- Currency Data
INSERT INTO CurrencyTable (CurrencyCode, CurrencyName, CurrencyRate) VALUES 
(586, 'PKR', 1),
(840, 'USB', 280.25);

UPDATE DB2ADMIN.CURRENCYTABLE
SET CURRENCYNAME='USD', CURRENCYRATE=280.25
WHERE CURRENCYCODE=840;

DELETE FROM DB2ADMIN.CURRENCYTABLE
WHERE CURRENCYCODE='PKR';


-- Customers Data (Using branchCode from your previous data)
INSERT INTO CustomerInfo (CustomerNumber, BranchCode, Category) VALUES 
('0081123456011', 1001, 'C'),
('0081123457011', 1001, 'C'),
('I23001010011', 1002, 'G'),
('A01001011000', 1001, 'G');

-- Accounts Data
INSERT INTO GLAccountsTable (CustomerNumber, BranchCode, AccountTitle, CurrencyCode, Balance) VALUES 
('I23001010011', 1002, 'Income', 840, 0.00),
('A01001011000', 1001, 'Financing', 840, 0.00);

UPDATE BAHL.GLACCOUNTSTABLE
SET CUSTOMERNUMBER='I23001010011', BRANCHCODE=1002, ACCOUNTTITLE='Income', CURRENCYCODE=586, BALANCE=0.00
WHERE ACCOUNTID=1;
UPDATE BAHL.GLACCOUNTSTABLE
SET CUSTOMERNUMBER='A01001011000', BRANCHCODE=1001, ACCOUNTTITLE='Financing', CURRENCYCODE=586, BALANCE=0.00
WHERE ACCOUNTID=2;



INSERT INTO AccountTable (CustomerNumber, BranchCode, AccountTitle, CurrencyCode, Balance) VALUES 
('0081123456011', 1001, 'ABC Company', 586, 15000),
('0081123457011', 1001, 'XYZ Company', 586, 10000),
('I23001010011', 1002, 'Income', 840, 0.00),
('A01001011000', 1001, 'Financing', 840, 0.00);


DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=5;
DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=6;
DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=7;
DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=8;

CREATE TABLE LoanLimits (
    LimitID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerNumber VARCHAR(20) UNIQUE NOT NULL,
    LoanLimit DECIMAL(15, 2),
    LimitBalance DECIMAL(15, 2),
    CreatedBy VARCHAR(50),
    CreatedOn TIMESTAMP,
    UpdatedBy VARCHAR(50),
    UpdatedOn TIMESTAMP,
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber),
    FOREIGN KEY (CreatedBy) REFERENCES users(userId) ON DELETE SET NULL,
    FOREIGN KEY (UpdatedBy) REFERENCES users(userId) ON DELETE SET NULL
);

DROP TABLE LOANLIMITS;

DELETE FROM BAHL.LOANLIMITS
WHERE CUSTOMERNUMBER='0081123456011';
DELETE FROM BAHL.LOANLIMITS
WHERE CUSTOMERNUMBER='0081123457011';

--IN office changes


DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=3;
DELETE FROM BAHL.ACCOUNTTABLE
WHERE ACCOUNTID=4;







--CREATE TABLE CustomerGLMapping (
--    CustomerNumber VARCHAR(20) PRIMARY KEY NOT NULL,
--    BranchCode INT NOT NULL,
--    AssetGL VARCHAR(20) NOT NULL,
--    IncomeGL VARCHAR(20) NOT NULL,
--    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber),
--    FOREIGN KEY (BranchCode) REFERENCES branches(BranchCode)
--);
--
--INSERT INTO CustomerGLMapping (CustomerNumber, BranchCode, AssetGL, IncomeGL) VALUES
--('0081123456011', 1001, 'ASSET123', 'INCOME456'),
--('0081123457011', 1001, 'ASSET789', 'INCOME101'),
--('I23001010011', 1002, 'ASSET202', 'INCOME303'),
--('A01001011000', 1001, 'ASSET404', 'INCOME505');
--
--




DELETE FROM BAHL.LOANLIMITS
WHERE CUSTOMERNUMBER='0081123456011';
DELETE FROM BAHL.LOANLIMITS
WHERE CUSTOMERNUMBER='0081123457011';

--Finding Customer FROM Branch
SELECT b.branchName, b.BRANCHCODE 
FROM CustomerInfo c
JOIN branches b ON c.BranchCode = b.branchCode
WHERE c.CustomerNumber = '0081123456011';




UPDATE BAHL.ACCOUNTTABLE
SET CUSTOMERNUMBER='I23001010011', BRANCHCODE=1002, ACCOUNTTITLE='Income', CURRENCYCODE=586, BALANCE=0.00
WHERE ACCOUNTID=3;
UPDATE BAHL.ACCOUNTTABLE
SET CUSTOMERNUMBER='A01001011000', BRANCHCODE=1001, ACCOUNTTITLE='Financing', CURRENCYCODE=586, BALANCE=0.00
WHERE ACCOUNTID=4;




--Todays Office Work

-- LoanApplication Table

DROP TABLE LOANAPPLICATION;


-- LoanApplication Table
-- LoanApplication Table
CREATE TABLE BAHL.LoanApplication (
    LoanID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) UNIQUE NOT null,
    CustomerNumber VARCHAR(20),
    GrantDate DATE,
    DocumentRefNo VARCHAR(12),
    DealAmount DECIMAL(15, 2),
    Remarks VARCHAR(250),
    Accrual DECIMAL(15, 2),
    Status INT DEFAULT 1, -- 1: Unauthorized, 0: Authorized, 9: Cancelled
    Authorized_By VARCHAR(50),
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber)
);



-- RepaymentDetails Table
CREATE TABLE BAHL.REPAYMENTDETAILS(
    LoanNumber VARCHAR(9) PRIMARY KEY NOT null, -- LoanNumber as primary key and foreign key
    NoOfDays INT,
    MaturityDate DATE,
    CONSTRAINT fk_loanNumber FOREIGN KEY (LoanNumber) REFERENCES BAHL.LOANAPPLICATION(LoanNumber) ON DELETE CASCADE
);


-- MarkupTable
CREATE TABLE MarkupTable (
    id BIGINT GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    loanNumber VARCHAR(9) NOT NULL,
    baseRateId BIGINT NOT NULL,
    spreadRate DECIMAL(4, 2) NOT NULL,
    applicableRate DECIMAL(5, 2) NOT NULL,
    odRate DECIMAL(4, 2) NOT NULL,
    CONSTRAINT PK_MarkupTable PRIMARY KEY (id),
    CONSTRAINT FK_MarkupBaseRate FOREIGN KEY (baseRateId) REFERENCES BAHL.BaseRateTable(id) ON DELETE RESTRICT,
    CONSTRAINT FK_MarkupLoanApplication FOREIGN KEY (loanNumber) REFERENCES BAHL.LOANAPPLICATION(LoanNumber) ON DELETE CASCADE,
    CONSTRAINT CK_ODRateGreaterThanApplicable CHECK (odRate >= applicableRate)
);

-- ProfitReceivable Table
CREATE TABLE BAHL.LoanFinancialDetails (
    FinancialDetailID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) NOT NULL,
    ProfitAmount DECIMAL(15, 2),
    ReceivableAmountAtMaturity DECIMAL(15, 2),
    FOREIGN KEY (LoanNumber) REFERENCES BAHL.LoanApplication(LoanNumber) ON DELETE CASCADE
);


DROP TABLE LOANAPPLICATION;
DROP TABLE REPAYMENTDETAILS;
DROP TABLE MARKUPTABLE;
DROP TABLE LOANFINANCIALDETAILS;


-- BaseRateTable
CREATE TABLE BAHL.BaseRateTable (
    id BIGINT GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    baseName VARCHAR(50) NOT NULL,
    baseRate DECIMAL(10, 4) NOT NULL,
    CONSTRAINT PK_BaseRateTable PRIMARY KEY (id)
);


DELETE FROM BAHL.LOANAPPLICATION
WHERE LOANID=3;



INSERT INTO BASERATETABLE (baseName, baseRate) VALUES
('FIXED RATE', 14.08),
('1 Month Kibor', 12.18),
('3 Month Kibor', 12.045),
('6 Month Kibor', 11.995),
('9 Month Kibor', 120.08);




DELETE FROM BAHL.LOANAPPLICATION
WHERE LOANID=22;
DELETE FROM BAHL.LOANAPPLICATION
WHERE LOANID=25;


DROP TABLE MARKUPTABLE;




DROP TABLE LOANFINANCIALDETAILS;


DELETE FROM BAHL.LOANAPPLICATION
WHERE LOANID=2;
DELETE FROM BAHL.LOANAPPLICATION
WHERE LOANID=21;





-- CancelledLoans Table
CREATE TABLE CancelledLoans (
    LoanID INT PRIMARY KEY,
    LoanNumber VARCHAR(9),
    CustomerNumber VARCHAR(20),
    GrantDate DATE,
    DocumentRefNo VARCHAR(12),
    DealAmount DECIMAL(15, 2),
    Remarks VARCHAR(250),
    Accrual DECIMAL(15, 2),
    NoOfDays INT,
    MaturityDate DATE,
    BaseType VARCHAR(20),
    BaseRate DECIMAL(10, 5),
    SpreadRate DECIMAL(10, 5),
    ApplicableRate DECIMAL(10, 5),
    ODRate DECIMAL(10, 5),
    ProfitAmount DECIMAL(15, 2),
    ReceivableAmountAtMaturity DECIMAL(15, 2),
    CancellationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_customerNumber FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber)
);

-- VoucherTransactions Table
CREATE TABLE VoucherTransactions (
    TransactionID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanID INT,
    TransactionCode VARCHAR(5),
    VoucherNo VARCHAR(10),
    TransactionNo INT,
    AccountNo VARCHAR(20),
    AccountTitle VARCHAR(100),
    Currency VARCHAR(3),
    DebitAmount DECIMAL(15, 2),
    CreditAmount DECIMAL(15, 2),
    CONSTRAINT fk_loanID FOREIGN KEY (LoanID) REFERENCES LoanApplication(LoanID)
);








-- Insert into BAHL.LoanApplication
INSERT INTO BAHL.LoanApplication (LoanNumber, CustomerNumber, GrantDate, DocumentRefNo, DealAmount, Remarks, Accrual)
VALUES ('TESTLOAN1', '0081123456011', CURRENT DATE, 'DOC20250408', 100000.00, 'Sample Loan', 100.00);

-- Insert into BAHL.REPAYMENTDETAILS (using the same LoanNumber)
INSERT INTO BAHL.REPAYMENTDETAILS (LoanNumber, NoOfDays, MaturityDate)
VALUES ('TESTLOAN1', 30, CURRENT DATE + 30 DAYS);

-- Assuming you have a BaseRate with id = 1 (you might need to adjust this)
INSERT INTO BAHL.BaseRateTable (baseName, baseRate)
VALUES ('SAMPLE_RATE', 10.00);

-- Insert into MarkupTable (using the same LoanNumber and the BaseRate id)
INSERT INTO MarkupTable (loanNumber, baseRateId, spreadRate, applicableRate, odRate)
VALUES ('TESTLOAN1', 1, 2.00, 12.00, 14.00);

-- Insert into BAHL.LoanFinancialDetails (using the same LoanNumber)
INSERT INTO BAHL.LoanFinancialDetails (LoanNumber, ProfitAmount, ReceivableAmountAtMaturity)
VALUES ('TESTLOAN1', 1000.00, 101000.00);

-- You can repeat these INSERT statements with a different LoanNumber
-- to create another set of related records if needed.


--Todays Update

CREATE TABLE BAHL.CancelledLoan (
    LoanID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    LoanNumber VARCHAR(9) UNIQUE NOT null,
    CustomerNumber VARCHAR(20),
    GrantDate DATE,
    DocumentRefNo VARCHAR(12),
    DealAmount DECIMAL(15, 2),
    Remarks VARCHAR(250),
    Accrual DECIMAL(15, 2),
    Status INT,
    Authorized_By VARCHAR(50),
    FOREIGN KEY (CustomerNumber) REFERENCES CustomerInfo(CustomerNumber)
);

ALTER TABLE BAHL.LoanApplication
ADD COLUMN NoOfDays INTEGER;

ALTER TABLE BAHL.LoanApplication
ADD COLUMN ApplicableRate DOUBLE;

ALTER TABLE BAHL.LoanApplication
ADD COLUMN ODRate DOUBLE;

